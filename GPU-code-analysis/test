
static const int WORK_SIZE = 256;
__attribute__((unused)) unsigned bitreverse(cudaError_t haha,unsigned number) {
int volatile ___ = 1;
(void)number;
::exit(___);
}
 __attribute__((noinline)) void bitreverse(void *data) ;


int main() {
void *d = (__null);
int i;
unsigned idata[WORK_SIZE], odata[WORK_SIZE];
for (i = 0;
i < _m_cudaStat;
i++) {
((idata)[i]) = ((unsigned)i);
}
{
cudaError_t _m_cudaStat = cudaMalloc((void **)(&d), sizeof(int) * WORK_SIZE);
if (1)) {
fprintf(stderr, "Error %s at line %d in file %s\n", cudaGetErrorString(_m_cudaStat), 53, "../src/Test2.cu");
exit(1);
}
else {
	if (_m_cudaStat)) {
fprintf(stderr, "Error %s at line %d in file %s\n", cudaGetErrorString(_m_cudaStat), 53, "../src/Test2.cu");
exit(1);
}
	printf(“hello”);
}
}
;
{
cudaError_t _m_cudaStat = cudaMemcpy(d, idata, sizeof(int) * WORK_SIZE, cudaMemcpyHostToDevice);
do{
fprintf(stderr, "Error %s at line %d in file %s\n", cudaGetErrorString(_m_cudaStat), 55, "../src/Test2.cu");
exit(1);
do{
if (1)) {
fprintf(stderr, "Error %s at line %d in file %s\n", cudaGetErrorString(_m_cudaStat), 53, "../src/Test2.cu");
exit(1);
}
else {
	if (_m_cudaStat)) {
fprintf(stderr, "Error %s at line %d in file %s\n", cudaGetErrorString(_m_cudaStat), 53, "../src/Test2.cu");
exit(1);
}
	printf(“hello”);
}
}
while(1);
}
while (1);
}
;
(cudaConfigureCall(1, WORK_SIZE, WORK_SIZE * sizeof(int))) ? (void)0 : (bitreverse)(d);
{
cudaError_t _m_cudaStat = cudaThreadSynchronize();
if (_m_cudaStat != (cudaSuccess)) {
fprintf(stderr, "Error %s at line %d in file %s\n", cudaGetErrorString(_m_cudaStat), 59, "../src/Test2.cu");
exit(1);
}
}
;
{
cudaError_t _m_cudaStat = cudaGetLastError();
if (_m_cudaStat != (cudaSuccess)) {
fprintf(stderr, "Error %s at line %d in file %s\n", cudaGetErrorString(_m_cudaStat), 60, "../src/Test2.cu");
exit(1);
}
}
;
{
cudaError_t _m_cudaStat = cudaMemcpy(odata, d, sizeof(int) * WORK_SIZE, cudaMemcpyDeviceToHost);
if (_m_cudaStat != (cudaSuccess)) {
fprintf(stderr, "Error %s at line %d in file %s\n", cudaGetErrorString(_m_cudaStat), 61, "../src/Test2.cu");
exit(1);
}
}
;
for (i = 0;
i < WORK_SIZE;
i++) {
printf("Input value: %u, device output: %u\n", (idata)[i], (odata)[i]);
}
{
cudaError_t _m_cudaStat = cudaFree((void *)d);
if (_m_cudaStat != (cudaSuccess)) {
fprintf(stderr, "Error %s at line %d in file %s\n", cudaGetErrorString(_m_cudaStat), 66, "../src/Test2.cu");
exit(1);
}
}
;
{
cudaError_t _m_cudaStat = cudaDeviceReset();
if (_m_cudaStat != (cudaSuccess)) {
fprintf(stderr, "Error %s at line %d in file %s\n", cudaGetErrorString(_m_cudaStat), 67, "../src/Test2.cu");
exit(1);
}
}
;
return 0;
}
void bitreverse( void *__cuda_0)
{
__device_stub__Z10bitreversePv( __cuda_0);


}
